<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DurableTask.AzureStorage</name>
    </assembly>
    <members>
        <member name="T:DurableTask.AzureStorage.AnalyticsEventSource">
            <summary>
            ETW Event Provider for the DurableTask.AzureStorage provider extension.
            </summary>
            <remarks>
            The ETW Provider ID for this event source is {4c4ad4a2-f396-5e18-01b6-618c12a10433}.
            </remarks>
        </member>
        <member name="F:DurableTask.AzureStorage.AnalyticsEventSource.Log">
            <summary>
            Singleton instance used for writing events.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.AzureStorageOrchestrationService">
            <summary>
            Orchestration service provider for the Durable Task Framework which uses Azure Storage as the durable store.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.#ctor(DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.AzureStorageOrchestrationService"/> class.
            </summary>
            <param name="settings">The settings used to configure the orchestration service.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.ToString">
            <inheritdoc/>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.#ctor(DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings,DurableTask.Core.IOrchestrationServiceInstanceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.AzureStorageOrchestrationService"/> class with a custom instance store.
            </summary>
            <param name="settings">The settings used to configure the orchestration service.</param>
            <param name="customInstanceStore">Custom UserDefined Instance store to be used with the AzureStorageOrchestrationService</param>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationService.MaxConcurrentTaskOrchestrationWorkItems">
            <summary>
            Gets or sets the maximum number of orchestrations that can be processed concurrently on a single node.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationService.MaxConcurrentTaskActivityWorkItems">
            <summary>
            Gets or sets the maximum number of work items that can be processed concurrently on a single node.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationService.EventBehaviourForContinueAsNew">
            <summary>
             Should we carry over unexecuted raised events to the next iteration of an orchestration on ContinueAsNew
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationService.TaskActivityDispatcherCount">
            <inheritdoc />
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationService.TaskOrchestrationDispatcherCount">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CreateAsync">
            <summary>
            Deletes and creates the neccesary Azure Storage resources for the orchestration service.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CreateIfNotExistsAsync">
            <summary>
            Creates the necessary Azure Storage resources for the orchestration service if they don't already exist.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.DeleteAsync">
            <summary>
            Deletes the Azure Storage resources used by the orchestration service.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CreateAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.DeleteAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.StopAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.LockNextTaskOrchestrationWorkItemAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CompleteTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem,DurableTask.Core.OrchestrationRuntimeState,System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationState)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.RenewTaskOrchestrationWorkItemLockAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.AbandonTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.ReleaseTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.LockNextTaskActivityWorkItem(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CompleteTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem,DurableTask.Core.TaskMessage)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.RenewTaskActivityWorkItemLockAsync(DurableTask.Core.TaskActivityWorkItem)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.AbandonTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.IsMaxMessageCountExceeded(System.Int32,DurableTask.Core.OrchestrationRuntimeState)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetDelayInSecondsAfterOnFetchException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetDelayInSecondsAfterOnProcessException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage)">
            <summary>
            Creates and starts a new orchestration.
            </summary>
            <param name="creationMessage">The message which creates and starts the orchestration.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationStatus[])">
            <summary>
            Creates a new orchestration
            </summary>
            <param name="creationMessage">Orchestration creation message</param>
            <param name="dedupeStatuses">States of previous orchestration executions to be considered while de-duping new orchestrations on the client</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.SendTaskOrchestrationMessageBatchAsync(DurableTask.Core.TaskMessage[])">
            <summary>
            Sends a list of messages to an orchestration.
            </summary>
            <remarks>
            Azure Storage does not support batch sending to queues, so there are no transactional guarantees in this method.
            </remarks>
            <param name="messages">The list of messages to send.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.SendTaskOrchestrationMessageAsync(DurableTask.Core.TaskMessage)">
            <summary>
            Sends a message to an orchestration.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(System.String,System.Boolean)">
            <summary>
            Get the most current execution (generation) of the specified instance.
            </summary>
            <param name="instanceId">Instance ID of the orchestration.</param>
            <param name="allExecutions">This parameter is not used.</param>
            <returns>List of <see cref="T:DurableTask.Core.OrchestrationState"/> objects that represent the list of orchestrations.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(System.String,System.String)">
            <summary>
            Get a the state of the specified execution (generation) of the specified orchestration instance.
            </summary>
            <param name="instanceId">Instance ID of the orchestration.</param>
            <param name="executionId">The execution ID (generation) of the specified instance.</param>
            <returns>The <see cref="T:DurableTask.Core.OrchestrationState"/> object that represents the orchestration.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get the most current execution (generation) of the specified instance.
            This method is not part of the IOrchestrationServiceClient interface. 
            </summary>
            <param name="instanceId">Instance ID of the orchestration.</param>
            <param name="allExecutions">This parameter is not used.</param>
            <param name="fetchInput">If set, fetch and return the input for the orchestration instance.</param>
            <returns>List of <see cref="T:DurableTask.Core.OrchestrationState"/> objects that represent the list of orchestrations.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the state of all orchestration instances.
            </summary>
            <returns>List of <see cref="T:DurableTask.Core.OrchestrationState"/></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus},System.Threading.CancellationToken)">
            <summary>
            Gets the state of all orchestration instances that match the specified parameters.
            </summary>
            <param name="createdTimeFrom">CreatedTime of orchestrations. Fetch status grater than this value.</param>
            <param name="createdTimeTo">CreatedTime of orchestrations. Fetch status less than this value.</param>
            <param name="runtimeStatus">RuntimeStatus of orchestrations. You can specify several status.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of <see cref="T:DurableTask.Core.OrchestrationState"/></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus},System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of all orchestration instances that match the specified parameters.
            </summary>
            <param name="createdTimeFrom">CreatedTime of orchestrations. Fetch status grater than this value.</param>
            <param name="createdTimeTo">CreatedTime of orchestrations. Fetch status less than this value.</param>
            <param name="runtimeStatus">RuntimeStatus of orchestrations. You can specify several status.</param>
            <param name="top">Top is number of records per one request.</param>
            <param name="continuationToken">ContinuationToken of the pager.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of <see cref="T:DurableTask.Core.OrchestrationState"/></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationStateAsync(DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state of all orchestration instances that match the specified parameters.
            </summary>
            <param name="condition">Query condition. <see cref="T:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition"/></param>
            <param name="top">Top is number of records per one request.</param>
            <param name="continuationToken">ContinuationToken of the pager.</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>List of <see cref="T:DurableTask.Core.OrchestrationState"/></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.ForceTerminateTaskOrchestrationAsync(System.String,System.String)">
            <summary>
            Force terminates an orchestration by sending a execution terminated event
            </summary>
            <param name="instanceId">Instance ID of the orchestration to terminate.</param>
            <param name="reason">The user-friendly reason for terminating.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.RewindTaskOrchestrationAsync(System.String,System.String)">
            <summary>
            Rewinds an orchestration then revives it from rewound state with a generic event message.
            </summary>
            <param name="instanceId">Instance ID of the orchestration to rewind.</param>
            <param name="reason">The reason for rewinding.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.ForceChangeAppLeaseAsync">
            <summary>
             Forces this app to take the AppLease if this app doesn't already have it. To use this, must be using the AppLease feature by setting UseAppLease to true in host.json.
            </summary>
            <returns>A task that completes when the steal app message is written to storage and the LeaseManagerStarter Task has been restarted.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationHistoryAsync(System.String,System.String)">
            <summary>
            Get a string dump of the execution history of the specified execution (generation) of the specified instance.
            </summary>
            <param name="instanceId">Instance ID of the orchestration.</param>
            <param name="executionId">The execution ID (generation) of the specified instance.</param>
            <returns>String with formatted JSON array representing the execution history.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.PurgeInstanceHistoryAsync(System.String)">
            <summary>
            Purge history for an orchestration with a specified instance id.
            </summary>
            <param name="instanceId">Instance ID of the orchestration.</param>
            <returns>Class containing number of storage requests sent, along with instances and rows deleted/purged</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.PurgeInstanceHistoryAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})">
            <summary>
            Purge history for orchestrations that match the specified parameters.
            </summary>
            <param name="createdTimeFrom">CreatedTime of orchestrations. Purges history grater than this value.</param>
            <param name="createdTimeTo">CreatedTime of orchestrations. Purges history less than this value.</param>
            <param name="runtimeStatus">RuntimeStatus of orchestrations. You can specify several status.</param>
            <returns>Class containing number of storage requests sent, along with instances and rows deleted/purged</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.DurableTask#Core#IOrchestrationServicePurgeClient#PurgeInstanceStateAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.DurableTask#Core#IOrchestrationServicePurgeClient#PurgeInstanceStateAsync(DurableTask.Core.PurgeInstanceFilter)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.WaitForOrchestrationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Wait for an orchestration to reach any terminal state within the given timeout
            </summary>
            <param name="instanceId">The orchestration instance to wait for.</param>
            <param name="executionId">The execution ID (generation) of the specified instance.</param>
            <param name="timeout">Max timeout to wait. Only positive <see cref="T:System.TimeSpan"/> values, <see cref="F:System.TimeSpan.Zero"/>, or <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/> are allowed.</param>
            <param name="cancellationToken">Task cancellation token.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.PurgeOrchestrationHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <summary>
            Purges orchestration instance state and history for orchestrations older than the specified threshold time.
            Also purges the blob storage. Currently only supported if a custom Instance store is provided.
            </summary>
            <param name="thresholdDateTimeUtc">Threshold date time in UTC</param>
            <param name="timeRangeFilterType">What to compare the threshold date time against</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.DownloadBlobAsync(System.String)">
            <summary>
            Download content that was too large to be stored in table storage,
            such as the input or output status fields, and for which the blob URI was stored instead.
            </summary>
            <param name="blobUri">The URI of the blob.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.Dispose">
            <summary>
            Disposes of the current object.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.AzureStorageOrchestrationService.GetOrchestrationWithQueryAsync(DurableTask.Core.Query.OrchestrationQuery,System.Threading.CancellationToken)">
            <summary>
            Gets the status of all orchestration instances with paging that match the specified conditions.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings">
            <summary>
            Settings that impact the runtime behavior of the <see cref="T:DurableTask.AzureStorage.AzureStorageOrchestrationService"/>.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.AppName">
            <summary>
            Gets or sets the name of the app.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ControlQueueBatchSize">
            <summary>
            Gets or sets the number of messages to pull from the control queue at a time. The default is 32.
            The maximum batch size supported by Azure Storage Queues is 32.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ControlQueueBufferThreshold">
            <summary>
            Gets or sets the number of control queue messages that can be buffered in memory at a time, at which
            point the dispatcher will wait before dequeuing any additional messages. The default is 64.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ControlQueueVisibilityTimeout">
            <summary>
            Gets or sets the visibility timeout of dequeued control queue messages. The default is 5 minutes.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ControlQueueRequestOptions">
            <summary>
            Gets or sets the <see cref="T:Microsoft.WindowsAzure.Storage.Queue.QueueRequestOptions"/> that are provided to all internal 
            usage of <see cref="T:Microsoft.WindowsAzure.Storage.Queue.CloudQueue"/> APIs for the control queue.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.WorkItemQueueVisibilityTimeout">
            <summary>
            Gets or sets the visibility timeout of dequeued work item queue messages. The default is 5 minutes.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.WorkItemQueueRequestOptions">
            <summary>
            Gets or sets the <see cref="T:Microsoft.WindowsAzure.Storage.Queue.QueueRequestOptions"/> that are provided to all internal 
            usage of <see cref="T:Microsoft.WindowsAzure.Storage.Queue.CloudQueue"/> APIs for the work item queue.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.HistoryTableRequestOptions">
            <summary>
            Gets or sets the <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableRequestOptions"/> that are provided to all internal
            usage of the <see cref="T:Microsoft.WindowsAzure.Storage.Table.CloudTable"/> APIs for the history table.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.StorageConnectionString">
            <summary>
            Gets or sets the Azure Storage connection string.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.TrackingStoreNamePrefix">
            <summary>
            Gets or sets the prefix of the TrackingStore table name.
            This property is only used when we have TrackingStoreStorageAccountDetails.
            The default is "DurableTask"
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.TaskHubName">
            <summary>
            Gets or sets the name of the task hub. This value is used to group related storage resources.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxConcurrentTaskActivityWorkItems">
            <summary>
            Gets or sets the maximum number of work items that can be processed concurrently on a single node.
            The default value is 10.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxConcurrentTaskOrchestrationWorkItems">
            <summary>
            Gets or sets the maximum number of orchestrations that can be processed concurrently on a single node.
            The default value is 100.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxConcurrentTaskEntityWorkItems">
            <summary>
            Gets or sets the maximum number of entity operation batches that can be processed concurrently on a single node.
            The default value is 100.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxStorageOperationConcurrency">
            <summary>
            Gets or sets the maximum number of concurrent storage operations that can be executed in the context
            of a single orchestration instance.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxCheckpointBatchSize">
            <summary>
            Gets the maximum number of orchestrator actions to checkpoint at a time.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.WorkerId">
            <summary>
            Gets or sets the identifier for the current worker.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.PartitionCount">
            <summary>
            Gets or sets the maximum number of orchestration partitions.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ExtendedSessionsEnabled">
            <summary>
            Gets or sets a flag indicating whether to enable extended sessions.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.FetchLargeMessageDataEnabled">
            <summary>
            Gets or sets a flag indicating whether to automatically fetch large orchestration input and outputs
            when it is stored in a compressed blob when retrieving orchestration state.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ExtendedSessionIdleTimeout">
            <summary>
            Gets or sets the number of seconds before an idle session times out.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.LeaseRenewInterval">
            <summary>
            Renew interval for all leases for partitions currently held.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.LeaseAcquireInterval">
            <summary>
            Interval when the current worker instance kicks off a task to compute if partitions are distributed evenly.
            among known host instances. 
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.LeaseInterval">
            <summary>
            Interval for which the lease is taken on Azure Blob representing a task hub partition in partition manager V1 (legacy partition manager) and V2 (safe partition manager).  
            The amount of time that a lease expiration deadline is extended on a renewal in partition manager V3 (table partition manager).
            If the lease is not renewed within this within this timespan, it will expire and ownership of the partition may move to another worker.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxQueuePollingInterval">
            <summary>
            Maximum interval for polling control and work-item queues.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.UseAppLease">
            <summary>
            If true, takes a lease on the task hub container, allowing for only one app to process messages in a task hub at a time.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.AppLeaseOptions">
            <summary>
            If UseAppLease is true, gets or sets the AppLeaaseOptions used for acquiring the lease to start the application.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.StorageAccountDetails">
            <summary>
            Gets or sets the Azure Storage Account details
            If provided, this is used to connect to Azure Storage
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.TrackingStoreStorageAccountDetails">
            <summary>
            Gets or sets the Storage Account Details for Tracking Store.
            In case of null, StorageAccountDetails is applied. 
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.EventBehaviourForContinueAsNew">
            <summary>
             Should we carry over unexecuted raised events to the next iteration of an orchestration on ContinueAsNew
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.ThrowExceptionOnInvalidDedupeStatus">
            <summary>
            When true, will throw an exception when attempting to create an orchestration with an existing dedupe status.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.UseLegacyPartitionManagement">
            <summary>
            Use the legacy partition management strategy, which improves performance at the cost of being less resiliant
            to split brain.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.UseTablePartitionManagement">
            <summary>
            Use the newer Azure Tables-based partition manager instead of the older Azure Blobs-based partition manager. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.UseDataContractSerialization">
            <summary>
            User serialization that will respect <see cref="T:System.Runtime.Serialization.IExtensibleDataObject"/>. Default is false.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.LoggerFactory">
            <summary>
            Gets or sets the optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for diagnostic logging.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.DisableExecutionStartedDeduplication">
            <summary>
            Gets or sets a value indicating whether to disable the ExecutionStarted de-duplication logic.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.OnImminentFailFast">
            <summary>
            Gets or sets an optional function to be executed before the app is recycled. Reason for shutdown is passed as a string parameter.
            This can be used to perform any pending cleanup tasks or just do a graceful shutdown.
            The function returns a <see cref="T:System.Boolean"/>. If 'true' is returned <see cref="M:System.Environment.FailFast(System.String)"/> is executed, if 'false' is returned,
            process kill is skipped.
            A wait time of 35 seconds will be given for the task to finish, if the task does not finish in required time, <see cref="M:System.Environment.FailFast(System.String)"/> will be executed.
            </summary>
            <remarks>Skipping process kill by returning false might have negative consequences if since Storage SDK might be in deadlock. Ensure if you return
            false a process shutdown is executed by you.</remarks>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxNumberOfTimeoutsBeforeRecycle">
            <summary>
            Gets or sets the  number of times we allow the timeout to be hit before recycling the app. We set this
            to a fixed value to prevent building up an infinite number of deadlocked tasks and leak resources.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.StorageRequestsTimeout">
            <summary>
            Gets or sets the number of seconds before a request to Azure Storage is considered as timed out.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.StorageRequestsTimeoutCooldown">
            <summary>
            Gets or sets the window duration (in seconds) in which we count the number of timed out request before recycling the app.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.CustomMessageTypeBinder">
            <summary>
            Gets or Sets an optional custom type binder used when trying to deserialize queued messages
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.HasTrackingStoreStorageAccount">
            <summary>
            Returns bool indicating is the TrackingStoreStorageAccount has been set.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.Logger">
            <summary>
            Gets an instance of <see cref="T:DurableTask.AzureStorage.Logging.LogHelper"/> that can be used for writing structured logs.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.MaxEntityOperationBatchSize">
            <summary>
            Gets or sets the limit on the number of entity operations that should be processed as a single batch.
            A null value indicates that no particular limit should be enforced.
            </summary>
            <remarks>
            Limiting the batch size can help to avoid timeouts in execution environments that impose time limitations on work items.
            If set to 1, batching is disabled, and each operation executes as a separate work item.
            </remarks>
            <value>
            A positive integer, or null.
            </value>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.EntityMessageReorderWindowInMinutes">
            <summary>
            Gets or sets the time window within which entity messages get deduplicated and reordered.
            If set to zero, there is no sorting or deduplication, and all messages are just passed through.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings.UseSeparateQueueForEntityWorkItems">
            <summary>
            Whether to use separate work item queues for entities and orchestrators.
            This defaults to false, to avoid issues when using this provider from code that does not support separate dispatch.
            Consumers that require separate dispatch (such as the new out-of-proc v2 SDKs) must set this to true.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.BackoffPollingHelper">
            <summary>
            Utility for implementing semi-intelligent backoff polling for Azure queues.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.DataContractJsonConverter">
            <summary>
            This class bridges <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> with Newtonsoft.Json. This serializer
            is slower, but it handles writing to <see cref="T:System.Runtime.Serialization.IExtensibleDataObject"/>, which Newtonsoft does not.
            A drawback of <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> is that ExtensionData Namespaces are not populated,
            meaning reading via the regular <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> will not correctly hydrate extra fields
            from ExtensionData. However, it can still be done by using <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> instead.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.DataContractJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.DataContractJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:DurableTask.AzureStorage.DurableStatusQueryResult">
            <summary>
            DurableStatusQueryResult is a result object for OrchestrationInstanceStatusQuery
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.DurableStatusQueryResult.OrchestrationState">
            <summary>
            OrchestrationInstances
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.DurableStatusQueryResult.ContinuationToken">
            <summary>
            ContinuationToken
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Fnv1aHashHelper">
            <summary>
            Fast, non-cryptographic hash function helper.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function.
            Tested with production data and random guids. The result was good distribution.
            </remarks>
        </member>
        <member name="M:DurableTask.AzureStorage.Fnv1aHashHelper.ComputeHash(System.String)">
            <summary>
            Compute a hash for a given string.
            </summary>
            <param name="value">The string to hash.</param>
            <returns>a four-byte hash</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Fnv1aHashHelper.ComputeHash(System.String,System.Text.Encoding)">
            <summary>
            Compute a hash for a given string and encoding.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="encoding">The encoding.</param>
            <returns>a four-byte hash</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Fnv1aHashHelper.ComputeHash(System.String,System.Text.Encoding,System.UInt32)">
            <summary>
            Compute a hash for a given string, encoding, and hash modifier.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="encoding">The encoding.</param>
            <param name="hash">The modifier hash.</param>
            <returns>a four-byte hash</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Fnv1aHashHelper.ComputeHash(System.Byte[])">
            <summary>
            Compute a hash for the given byte array.
            </summary>
            <param name="array">The byte array to hash.</param>
            <returns>a four-byte hash</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Fnv1aHashHelper.ComputeHash(System.Byte[],System.UInt32)">
            <summary>
            Compute a hash for the given byte array.
            </summary>
            <param name="array">The byte array to hash.</param>
            <param name="hash">The modifier hash.</param>
            <returns>a four-byte hash</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.ICustomTypeBinder">
            <summary>
            Abstraction to prevent surfacing the dynamic loading between System.Runtime.Serialization.SerializationBinder and Newtonsoft.Json.Serialization.ISerializationBinder
            Used when deserializing QueueMessages to MessageData to allow providing custom type binding. 
            Does not support custom bindings for DurableTask types
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.ICustomTypeBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the System.Reflection.Assembly name of the serialized object.</param>
            <param name="typeName">Specifies the System.Type name of the serialized object.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.ICustomTypeBinder.BindToType(System.String,System.String)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the System.Reflection.Assembly name of the serialized object.</param>
            <param name="typeName">Specifies the System.Type name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.MessageData">
            <summary>
            Protocol class for all Azure Queue messages.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.MessageData.#ctor(DurableTask.Core.TaskMessage,System.Guid,System.String,System.Nullable{System.Int32},DurableTask.Core.OrchestrationInstance)">
            <summary>
            The MessageData object.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.MessageData.#ctor">
            <summary>
            The MessageData object.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.ActivityId">
            <summary>
            The Activity ID.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.TaskMessage">
            <summary>
            The TaskMessage.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.CompressedBlobName">
            <summary>
            The blob name for the compressed message. This value is set if there is a compressed blob.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.SequenceNumber">
            <summary>
            The client-side sequence number of the message.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.Episode">
            <summary>
            The episode number of the orchestration which created this message.
            </summary>
            <remarks>
            This value may be <c>null</c> if the orchestration instance that created
            the message was started before episode numbers were tracked, or if the message
            was created by a client.
            </remarks>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.Sender">
            <summary>
            The sender of the message.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.MessageData.SerializableTraceContext">
            <summary>
            TraceContext for correlation.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.MessageFormatFlags">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="F:DurableTask.AzureStorage.MessageFormatFlags.InlineJson">
            <summary>
            Inline JSON message type.
            </summary>
        </member>
        <member name="F:DurableTask.AzureStorage.MessageFormatFlags.StorageBlob">
            <summary>
            Blob message type.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.MessageManager">
            <summary>
            The message manager for messages from MessageData, and DynamicTableEntities
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.MessageManager.FetchLargeMessageIfNecessary(System.String)">
            <summary>
            If the "message" of an orchestration state is actually a URI retrieves actual message from blob storage.
            Otherwise returns the message as is.
            </summary>
            <param name="message">The message to be fetched if it is a url.</param>
            <returns>Actual string representation of message.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Messaging.MessageCollection.AddOrReplace(DurableTask.AzureStorage.MessageData)">
            <summary>
            Adds or replaces a message in the list based on the message ID.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Messaging.TaskHubQueue.AddMessageAsync(DurableTask.Core.TaskMessage,DurableTask.AzureStorage.Messaging.SessionBase)">
            <summary>
            Adds message to a queue
            </summary>
            <param name="message">Instance of <see cref="T:DurableTask.Core.TaskMessage"/></param>
            <param name="sourceSession">Instance of <see cref="T:DurableTask.AzureStorage.Messaging.SessionBase"/></param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Messaging.TaskHubQueue.AddMessageAsync(DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationInstance)">
            <summary>
            Adds message to a queue
            </summary>
            <param name="message">Instance of <see cref="T:DurableTask.Core.TaskMessage"/></param>
            <param name="sourceInstance">Instnace of <see cref="T:DurableTask.Core.OrchestrationInstance"/></param>
            <returns></returns>
        </member>
        <member name="T:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor">
            <summary>
            Utility class for collecting performance information for a Durable Task hub without actually running inside a Durable Task worker.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor"/> class.
            </summary>
            <param name="storageConnectionString">The connection string for the Azure Storage account to monitor.</param>
            <param name="taskHub">The name of the task hub within the specified storage account.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor"/> class.
            </summary>
            <param name="storageAccount">The Azure Storage account to monitor.</param>
            <param name="taskHub">The name of the task hub within the specified storage account.</param>
            <param name="maxPollingIntervalMilliseconds">The maximum interval in milliseconds for polling control and work-item queues.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,DurableTask.AzureStorage.AzureStorageOrchestrationServiceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor"/> class.
            </summary>
            <param name="storageAccount">The Azure Storage account to monitor.</param>
            <param name="settings">The orchestration service settings.</param>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.EnableRandomScaleDownOnLowLatency">
            <summary>
            Gets or sets a value to enable random scale-in (e.g. 10% of recommendations) when queue latencies are low.
            This property should be set to <c>false</c> for unit testing.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.PulseAsync(System.Int32)">
            <summary>
            Collects and returns a sampling of all performance metrics being observed by this instance as well as a scale
            recommendation.
            </summary>
            <param name="currentWorkerCount">The number of workers known to be processing messages for this task hub.</param>
            <returns>Returns a performance data summary with scale recommendation or <c>null</c> if data cannot be obtained.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.PulseAsync">
            <summary>
            Collects and returns a sampling of all performance metrics being observed by this instance. Will not return a scale
            recommendation.
            </summary>
            <returns>Returns a performance data summary with no scale recommendation or <c>null</c> if data cannot be obtained.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.GetWorkItemQueueStatusAsync">
            <summary>
            Gets the scale-related status of the work-item queue.
            </summary>
            <returns>The approximate number of messages in the work-item queue.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.GetAggregateControlQueueLengthAsync">
            <summary>
            Gets the approximate aggreate length (sum) of the all known control queues.
            </summary>
            <returns>The approximate number of messages across all control queues.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.MakeScaleRecommendation(System.Int32)">
            <summary>
            Calculates a Scale Recommendation based on in-memory performance metrics.
            </summary>
            <param name="workerCount">The number of workers known to be processing messages for this task hub.</param>
            <returns>Returns a scale recommendation</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.MakeScaleRecommendation(System.Int32,DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat[])">
            <summary>
            Calculates a Scale Recommendation based on passed-in performance metrics.
            </summary>
            <param name="workerCount">The number of workers known to be processing messages for this task hub.</param>
            <param name="performanceHeartbeats">Previously collected, chronologically-ordered performance metrics.</param>
            <returns>Returns a scale recommendation</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.ControlQueueData">
            <summary>
            Data structure containing the number of partitions and the aggregate
            number of messages across those control queue partitions.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.ControlQueueData.PartitionCount">
            <summary>
            Gets or sets the number of control queue partitions.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.ControlQueueData.AggregateQueueLength">
            <summary>
            Gets or sets the number of messages across all control queues.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.WorkItemQueueData">
            <summary>
            Data structure containing scale-related statistics for the work-item queue.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.WorkItemQueueData.QueueLength">
            <summary>
            Gets or sets the number of messages in the work-item queue.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.DisconnectedPerformanceMonitor.WorkItemQueueData.FirstMessageAge">
            <summary>
            Gets or sets the age of the first message in the work-item queue.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat">
            <summary>
            Data structure containing point-in-time performance metrics for a durable task hub.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.PartitionCount">
            <summary>
            Gets the number of partitions configured in the task hub.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.ControlQueueLengths">
            <summary>
            Gets the number of messages across all control queues.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.ControlQueueLatencies">
            <summary>
            Gets the latency of messages in all control queues.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.WorkItemQueueLength">
            <summary>
            Gets the number of messages in the work-item queue.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.WorkItemQueueLatencyTrend">
            <summary>
            Gets a trend value describing the latency of messages in the work-item queue over a period of time.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.WorkItemQueueLatency">
            <summary>
            Gets the approximate age of the first work-item queue message.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.ScaleRecommendation">
            <summary>
            Gets a scale recommendation for the task hub given the current performance metrics.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat.ToString">
            <summary>
            Gets a string description of the current <see cref="T:DurableTask.AzureStorage.Monitoring.PerformanceHeartbeat"/> object.
            </summary>
            <returns>A string description useful for diagnostics.</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.Monitoring.ScaleAction">
            <summary>
            Possible scale actions for durable task hub.
            </summary>
        </member>
        <member name="F:DurableTask.AzureStorage.Monitoring.ScaleAction.None">
            <summary>
            Do not add or remove workers.
            </summary>
        </member>
        <member name="F:DurableTask.AzureStorage.Monitoring.ScaleAction.AddWorker">
            <summary>
            Add workers to the current task hub.
            </summary>
        </member>
        <member name="F:DurableTask.AzureStorage.Monitoring.ScaleAction.RemoveWorker">
            <summary>
            Remove workers from the current task hub.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Monitoring.ScaleRecommendation">
            <summary>
            Represents a scale recommendation for the task hub given the current performance metrics.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.ScaleRecommendation.Action">
            <summary>
            Gets the recommended scale action for the current task hub.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.ScaleRecommendation.KeepWorkersAlive">
            <summary>
            Gets a recommendation about whether to keep existing task hub workers alive.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Monitoring.ScaleRecommendation.Reason">
            <summary>
            Gets text describing why a particular scale action was recommended.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Monitoring.ScaleRecommendation.ToString">
            <summary>
            Gets a string description of the current <see cref="T:DurableTask.AzureStorage.Monitoring.ScaleRecommendation"/> object.
            </summary>
            <returns>A string description useful for diagnostics.</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.OrchestrationInstanceStatus">
            <summary>
            Table Entity Representation of an Orchestration Instance's Status
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.OrchestrationSessionManager.DrainAsync(System.String,DurableTask.AzureStorage.Partitioning.CloseReason,System.Threading.CancellationToken,System.String)">
            <summary>
            The drain process occurs when the lease is stolen or the worker is shutting down, 
            prompting the worker to cease listening for new messages and to finish processing all the existing information in memory.
            </summary>
            <param name="partitionId">The partition that is going to released.</param>
            <param name="reason">Reason to trigger the drain progres.</param>
            <param name="cancellationToken">Cancel the drain process if it takes too long in case the worker is unhealthy.</param>
            <param name="caller">The worker that calls this method.</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.OrchestrationSessionManager.DedupeExecutionStartedMessagesAsync(DurableTask.AzureStorage.Messaging.ControlQueue,System.Collections.Generic.IReadOnlyList{DurableTask.AzureStorage.MessageData},System.Guid,System.Threading.CancellationToken)">
            <summary>
            This method enumerates all the provided queue messages looking for ExecutionStarted messages. If any are found, it
            queries table storage to ensure that each message has a matching record in the Instances table. If not, this method
            will either asynchronously discard the message or abandon it for reprocessing in case the Instances table record
            hasn't been written yet (this happens asynchronously and there is no guaranteed order). Meanwhile, this method will
            return the list of filtered messages.
            </summary>
            <param name="controlQueue">A reference to the control queue from which these messages were dequeued.</param>
            <param name="messages">The full set of messages recently dequeued.</param>
            <param name="traceActivityId">The trace activity ID to use when writing traces.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Returns the list of non-ExecutionStarted messages. This may be an empty list.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.OrchestrationSessionManager.IsScheduledAfterInstanceUpdate(DurableTask.AzureStorage.MessageData,DurableTask.Core.OrchestrationState)">
            <summary>
            Returns <c>true</c> if <paramref name="msg"/> was scheduled (or rescheduled) after the corresponding
            <paramref name="remoteInstance"/> record was written to the Instances table; <c>false</c> otherwise.
            This logic is used to help determine whether an ExecutionStarted message is redundant and can be de-duped.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.OrchestrationSessionManager.AddMessageToPendingOrchestration(DurableTask.AzureStorage.Messaging.ControlQueue,System.Collections.Generic.IEnumerable{DurableTask.AzureStorage.MessageData},System.Guid,System.Threading.CancellationToken)">
             <summary>
             Adds history messages to an orchestration for its next replay.
            
             "Pending" here is unrelated to the Pending runtimeStatus.
             </summary>
             <param name="controlQueue">The orchestration's control-queue.</param>
             <param name="queueMessages">New messages to assign to orchestrators</param>
             <param name="traceActivityId">The "related" ActivityId of this operation.</param>
             <param name="cancellationToken">Cancellation token in case the orchestration is terminated.</param>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.AppLeaseManager">
            <summary>
            Class responsible for starting and stopping the partition manager. Also implements the app lease feature to ensure a single app's partition manager is started at a time.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.AppLeaseOptions">
            <summary>
            Options to control timing intervals for the app lease.
            </summary> 
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.AppLeaseOptions.RenewInterval">
            <summary>
            Renew interval for the app lease held by this instance.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.AppLeaseOptions.AcquireInterval">
            <summary>
            Interval when this instance attempts to continuously acquire the app lease. When two applications are running, this setting
            will affect the secondary app attempting to take the app lease from the first app.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.AppLeaseOptions.LeaseInterval">
            <summary>
            Interval for which the lease is taken on Azure Blob representing an EventHub partition.  If the lease is not renewed within this 
            interval, it will cause it to expire and ownership of the app lease will move to another instance.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.AppLeaseOptions.DefaultOptions">
            <summary>
            Creates an instance of <see cref="T:DurableTask.AzureStorage.Partitioning.AppLeaseOptions"/> with following default values:
                a) RenewInterval = 25 seconds
                b) AcquireInterval = 300 seconds, or 5 minutes
                c) DefaultLeaseInterval = 60 seconds
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.CloseReason">
            <summary>Enumerates the reason for closing of session.</summary>
        </member>
        <member name="F:DurableTask.AzureStorage.Partitioning.CloseReason.Shutdown">
            <summary>Specifies that the server is shutting down.</summary>
        </member>
        <member name="F:DurableTask.AzureStorage.Partitioning.CloseReason.LeaseLost">
            <summary>Specifies that the current lease has been lost.</summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.Lease">
            <summary>Contains partition ownership information.</summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.Lease.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.Partitioning.Lease" /> class.</summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.Lease.#ctor(DurableTask.AzureStorage.Partitioning.Lease)">
            <summary>Initializes a new instance of the 
            <see cref="T:DurableTask.AzureStorage.Partitioning.Lease" /> class with the specified 
            <see cref="M:DurableTask.AzureStorage.Partitioning.Lease.#ctor(DurableTask.AzureStorage.Partitioning.Lease)" /> value as reference.</summary> 
            <param name="source">The specified <see cref="M:DurableTask.AzureStorage.Partitioning.Lease.#ctor(DurableTask.AzureStorage.Partitioning.Lease)" /> instance where its property values will be copied from.</param>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.Lease.PartitionId">
            <summary>Gets the ID of the partition to which this lease belongs.</summary>
            <value>The partition identifier.</value>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.Lease.Owner">
            <summary>Gets or sets the host owner for the partition.</summary>
            <value>The host owner of the partition.</value>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.Lease.Token">
            <summary>Gets or sets the lease token that manages concurrency between hosts. You can use this token to guarantee single access to any resource needed by the 
            <see cref="T:DurableTask.AzureStorage.AzureStorageOrchestrationService" /> object.</summary> 
            <value>The lease token.</value>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.Lease.Epoch">
            <summary>Gets or sets the epoch year of the lease, which is a value 
            you can use to determine the most recent owner of a partition between competing nodes.</summary> 
            <value>The epoch year of the lease.</value>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.Lease.IsExpired">
            <summary>Determines whether the lease is expired.</summary>
            <returns>true if the lease is expired; otherwise, false.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.Lease.Equals(System.Object)">
            <summary>Determines whether this instance is equal to the specified object.</summary>
            <param name="obj">The object to compare.</param>
            <returns>true if this instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.Lease.GetHashCode">
            <summary>Returns the hash code of the current instance.</summary>
            <returns>The hash code of the current instance.</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions">
            <summary>
            Options to control various aspects of partition distribution happening within the host instance.
            </summary> 
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions.RenewInterval">
            <summary>
            Renew interval for all leases for partitions currently held by this instance.
            </summary>
            <remarks>
            The table partition manager does not use this setting. It instead relies on <see cref="P:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions.AcquireInterval"/>
            to determine the interval for renewing partition leases.
            </remarks>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions.AcquireInterval">
            <summary>
            Interval when this instance kicks off a task to compute if partitions are distributed evenly
            among known host instances. 
            </summary>
            <remarks>
            When using the table partition manager, this property sets the frequency at which the
            worker reads and updates the partition table except in the following two scenarios:
            (1) If the worker fails to update the partition table, then the partitions table is read immediately.
            (2) If the worker is waiting for a partition to be released or is working on releasing a partition, then the interval becomes 1 second.
            </remarks>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions.LeaseInterval">
            <summary>
            Interval for which the lease is taken.  If the lease is not renewed within this 
            interval, the lease will expire and ownership of the partition will move to another instance.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions.ShouldStealLeases">
            <summary>
            Determines whether or not this set of leases should utilize lease stealing logic for rebalancing
            during scale-out operations.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions.DefaultOptions">
            <summary>
            Creates an instance of <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseCollectionBalancerOptions"/> with following default values:
                a) RenewInterval = 10 seconds
                b) AcquireInterval = 10 seconds
                c) DefaultLeaseInterval = 30 seconds
                d) MaxReceiveClients = 16,
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.LeaseLostException">
            <summary>Represents an exception that occurs when the service lease has been lost.</summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseLostException" /> class using default values.</summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.#ctor(DurableTask.AzureStorage.Partitioning.Lease)">
            <summary>Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseLostException" /> class using specified lease.</summary>
            <param name="lease">The messaging lease.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.#ctor(DurableTask.AzureStorage.Partitioning.Lease,System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseLostException" /> class using specified lease and the error that caused the exception.</summary> 
            <param name="lease">The messaging lease.</param>
            <param name="innerException">The error that caused the exception.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.#ctor(System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseLostException" /> class using specified error message.</summary> 
            <param name="message">The message associated with the error.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseLostException" /> class using specified error message and inner exception.</summary> 
            <param name="message">The message associated with the error.</param>
            <param name="innerException">The error that caused the exception.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:DurableTask.AzureStorage.Partitioning.LeaseLostException" /> class using specified information and context.</summary> 
            <param name="info">The serialized information about the exception.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.LeaseLostException.Lease">
            <summary>Gets or sets the service lease.</summary>
            <value>The service lease.</value>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.LeaseLostException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
            <param name="context">The destination (see StreamingContext) for this serialization.</param>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.TableLease">
            <summary>
            The partition lease used by the table partition manager.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.PartitionKey">
            <summary>
            Required atrribute of Azure.Data.Tables storage entity. It is always set to <see cref="F:DurableTask.AzureStorage.Partitioning.TableLease.DefaultPartitionKey"/>.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.RowKey">
            <summary>
            The name of the partition/control queue.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.CurrentOwner">
            <summary>
            The current owner of this lease. 
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.NextOwner">
            <summary>
            The name of the worker stealing this lease. It's null when no worker is actively stealing it.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.OwnedSince">
            <summary>
            The timestamp at which the partition was originally acquired by this worker. 
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.LastRenewal">
            <summary>
            The timestamp at which the partition was last renewed.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.ExpiresAt">
            <summary>
            The timestamp at which the partition lease expires.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.IsDraining">
            <summary>
            True if the partition is being drained; False otherwise.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.Timestamp">
            <summary>
            Required atrribute of Azure.Data.Tables storage entity. Not used. 
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TableLease.ETag">
            <summary>
            Unique identifier used to version entities and ensure concurrency safety in Azure.Data.Tables.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.TablePartitionManager">
            <summary>
            Partition Manager V3 based on Azure Storage Tables.
            </summary>
            <remarks>
            Previous partition managers were based on Azure Storage blobs, which are more complex to manage
            and have more expensive per-transaction costs, particularly in Azure Storage V2 accounts. This
            table storage-based partition manager aims to be both simpler, cheaper, easier to debug, and 
            faster when it comes to rebalancing.
            </remarks>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.#ctor(DurableTask.AzureStorage.AzureStorageOrchestrationService,DurableTask.AzureStorage.Storage.AzureStorageClient)">
            <summary>
            Constructor to initiate new instances of TablePartitionManager.
            </summary>
            <param name="azureStorageClient">Client for the storage account.</param>
            <param name="service">The service responsible for initiating or terminating the partition manager.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.DurableTask#AzureStorage#Partitioning#IPartitionManager#StartAsync">
            <summary>
            Starts the partition management loop for the current worker.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.PartitionManagerLoop(System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            This loop is the main loop for worker to manage the partition table. 
            Worker will manage the table regularly with default interval.
            If the worker is waiting for any other worker's partitions or is going to release any owned partitions, the wait time will be 1 second for timely update.
            If worker failed to update the table or any other exceptions occurred, the worker will re-try immediately.
            If the failure operations occurred too many times, the wait time will be back to default value to avoid excessive loggings.
            Loop will end after shutdown is requested and the worker successfully released all ownership leases.
            </summary>
            <param name="gracefulShutdownToken">Cancellation of this token initiates the graceful shutdown process of the partition manager.</param>
            <param name="forcefulShutdownToken">Cancellation of this token forcefully aborts the partition manager loop.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.DurableTask#AzureStorage#Partitioning#IPartitionManager#StopAsync">
            <summary>
            Stop the partition manager. It first stops the partition manager loop to prevent stealing partitions during shutdown.
            Then it starts the Task ShutDown() to release all ownership leases. 
            Worker will retry updating the table if the update failed or if any other exceptions occurred.
            In the case of too many failed operations, the loop waiting time will be extended to avoid excessive logs.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.GetTableLeases">
            <summary>
            Used for internal testing.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.TableLeaseManager.ReadAndWriteTableAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads the partition table to determine the tasks the worker should do. Used by the PartitionManagerLoop.
            During the iteration, the worker will first claim any available partitions with method `TryClaimLease`. 
            Subsequently, if the partition is owned by this worker, it will proceed with method `CheckOwnershipLease`. 
            However, if the partition is owned by other workers, it will utilize method `CheckOtherWorkerLease`.
            If the shutdown is requested, then stop regular claim and balance process, and call method `TryDrainAndReleaseAllPartitions` to release all ownership leases.
            </summary>
            <param name="isShuttingDown">Indicates that the partition manager is in the process of shutting down.</param>
            <param name="forcefulShutdownToken">Cancellation of this token forcefully aborts the partition manager loop.</param>
            <returns> The <see cref="T:DurableTask.AzureStorage.Partitioning.TablePartitionManager.ReadTableReponse"/> incidates whether the worker is waiting to claim a stolen lease from other workers or working on releasing any ownership leases.</returns>
            <exception cref="T:Azure.RequestFailedException">will be thrown if failed to update the partition table. Partition Manager loop will catch it and re-read the table to get the latest information.</exception>
        </member>
        <member name="M:DurableTask.AzureStorage.Partitioning.TablePartitionManager.TableLeaseManager.TryClaimLease(DurableTask.AzureStorage.Partitioning.TableLease)">
            <summary>
            Checks to see if a lease is available to be claimed by the current worker.
            </summary>
            <param name="partition">The partition to check.</param>
        </member>
        <member name="T:DurableTask.AzureStorage.Partitioning.TablePartitionManager.ReadTableReponse">
            <summary>
            The Response class describes the behavior of the TableLeaseManager's  ReadAndWrite method. 
            If the worker is draining (i.e working to release its leases), the method sets the IsDrainingPartition flag to true. 
            If the worker is going to acquire another lease from another worker, it sets the WaitForPartition flag to true. 
            When either of these flags is true, the sleep time of the worker changes to 1 second.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TablePartitionManager.ReadTableReponse.IsDrainingPartition">
            <summary>
            True if the worker is working on release lease. 
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TablePartitionManager.ReadTableReponse.IsWaitingForPartitionRelease">
            <summary>
            True if the worker is waiting for a lease to be released.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Partitioning.TablePartitionManager.ReadTableReponse.ReleasedAllLeases">
            <summary>
            True if the worker successfully released all ownership leases for shutdown.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.PurgeHistoryResult">
            <summary>
            Class to hold statistics about this execution of purge history
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.PurgeHistoryResult.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for purge history statistics
            </summary>
            <param name="storageRequests">Requests sent to storage</param>
            <param name="instancesDeleted">Number of instances deleted</param>
            <param name="rowsDeleted">Number of rows deleted</param>
        </member>
        <member name="P:DurableTask.AzureStorage.PurgeHistoryResult.StorageRequests">
            <summary>
            Number of requests sent to Storage during this execution of purge history
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.PurgeHistoryResult.InstancesDeleted">
            <summary>
            Number of instances deleted during this execution of purge history
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.PurgeHistoryResult.RowsDeleted">
            <summary>
            Number of rows deleted during this execution of purge history
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.PurgeHistoryResult.ToCorePurgeHistoryResult">
            <summary>
            Converts from AzureStorage.PurgeHistoryResult to Core.PurgeResult type
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.SimpleBufferManager">
            <summary>
            Simple buffer manager intended for use with Azure Storage SDK and compression code.
            It is not intended to be robust enough for external use.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.SimpleBufferManager.Shared">
            <summary>
            Shared singleton instance of <see cref="T:DurableTask.AzureStorage.SimpleBufferManager"/>.
            </summary>
        </member>
        <member name="F:DurableTask.AzureStorage.SimpleBufferManager.pool">
            <summary>
            Internal pool of buffers. Using stacks internally ensures that the same pool can be
            frequently reused, which can result in improved performance due to hardware caching.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.SimpleBufferManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DurableTask.AzureStorage.SimpleBufferManager"/> class.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.SimpleBufferManager.AllocatedBytes">
            <summary>
            The total number of bytes allocated by this buffer.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.SimpleBufferManager.AvailableBytes">
            <summary>
            The total bytes available to be reused.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.SimpleBufferManager.BucketCount">
            <summary>
            The number of buckets allocated by this pool.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.SimpleBufferManager.GetDefaultBufferSize">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.SimpleBufferManager.ReturnBuffer(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.SimpleBufferManager.TakeBuffer(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.SimpleBufferManager.ToString">
            <summary>
            Returns a debug string representing the current state of the buffer manager.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.StorageAccountDetails">
            <summary>
            Connection details of the Azure Storage account
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.StorageCredentials">
            <summary>
            The storage account credentials
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.AccountName">
            <summary>
            The storage account name
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.EndpointSuffix">
            <summary>
            The storage account endpoint suffix
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.ConnectionString">
            <summary>
            The storage account connection string.
            </summary>
            <remarks>
            If specified, this value overrides any other settings.
            </remarks>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.BlobServiceUri">
            <summary>
            The data plane URI for the blob service of the storage account.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.QueueServiceUri">
            <summary>
            The data plane URI for the queue service of the storage account.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.StorageAccountDetails.TableServiceUri">
            <summary>
            The data plane URI for the table service of the storage account.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.StorageAccountDetails.ToCloudStorageAccount">
            <summary>
            Convert this to its equivalent <see cref="T:Microsoft.WindowsAzure.Storage.CloudStorageAccount"/>.
            </summary>
            <returns>The corresponding <see cref="T:Microsoft.WindowsAzure.Storage.CloudStorageAccount"/> instance.</returns>
        </member>
        <member name="F:DurableTask.AzureStorage.TimeoutHandler.ProcessKillAction">
            <summary>
            Process kill action. This is exposed here to allow override from tests.
            </summary>
        </member>
        <member name="T:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore">
            <summary>
            Tracking store for use with <see cref="T:DurableTask.AzureStorage.AzureStorageOrchestrationService"/>. Uses Azure Tables and Azure Blobs to store runtime state.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.CreateAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.DeleteAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.ExistsAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.GetHistoryEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.GetStateAsync(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.GetStateAsync(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.FetchInstanceStatusAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.FetchInstanceStatusInternalAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.GetStateAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.GetStateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.PurgeHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.PurgeInstanceHistoryAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.PurgeInstanceHistoryAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.SetNewExecutionAsync(DurableTask.Core.History.ExecutionStartedEvent,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.UpdateStatusForRewindAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.AzureTableTrackingStore.UpdateStateAsync(DurableTask.Core.OrchestrationRuntimeState,DurableTask.Core.OrchestrationRuntimeState,System.String,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.#ctor(DurableTask.Core.IOrchestrationServiceInstanceStore)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.CreateAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.DeleteAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.GetHistoryEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.FetchInstanceStatusAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.GetStateAsync(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.GetStateAsync(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.PurgeHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.SetNewExecutionAsync(DurableTask.Core.History.ExecutionStartedEvent,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.UpdateStateAsync(DurableTask.Core.OrchestrationRuntimeState,DurableTask.Core.OrchestrationRuntimeState,System.String,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.InstanceStoreBackedTrackingStore.UpdateStateAsync(DurableTask.Core.OrchestrationRuntimeState,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:DurableTask.AzureStorage.Tracking.ITrackingStore">
            <summary>
            Defines a store which maintains the runtime state for the AzureStorageOrchestrationService
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.CreateAsync">
            <summary>
            Create Tracking Store Resources if they don't already exist
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.DeleteAsync">
            <summary>
            Delete Tracking Store Resources if they already exist
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.ExistsAsync">
            <summary>
            Do the Resources for the tracking store already exist
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.StartAsync">
            <summary>
            Start up the Tracking Store before use
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetHistoryEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get History Events from the Store
            </summary>
            <param name="instanceId">InstanceId for</param>
            <param name="expectedExecutionId">ExcutionId for the execution that we want this retrieve for. If null the latest execution will be retrieved</param>
            <param name="cancellationToken">CancellationToken if abortion is needed</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.RewindHistoryAsync(System.String,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Queries by InstanceId and locates failure - then calls function to wipe ExecutionIds
            </summary>
            <param name="instanceId">InstanceId for orchestration</param>
            <param name="failedLeaves">List of failed orchestrators to send to message queue - no failed sub-orchestrators</param>
            <param name="cancellationToken">CancellationToken if abortion is needed</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.UpdateStateAsync(DurableTask.Core.OrchestrationRuntimeState,DurableTask.Core.OrchestrationRuntimeState,System.String,System.String,System.String,System.Object)">
            <summary>
            Update State in the Tracking store for a particular orchestration instance and execution base on the new runtime state
            </summary>
            <param name="newRuntimeState">The New RuntimeState</param>
            <param name="oldRuntimeState">The RuntimeState for an olderExecution</param>
            <param name="instanceId">InstanceId for the Orchestration Update</param>
            <param name="executionId">ExecutionId for the Orchestration Update</param>
            <param name="eTag">The ETag value to use for safe updates</param>
            <param name="trackingStoreContext">Additional context for the execution that is maintained by the tracking store.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get The Orchestration State for the Latest or All Executions
            </summary>
            <param name="instanceId">Instance Id</param>
            <param name="allExecutions">True if states for all executions are to be fetched otherwise only the state for the latest execution of the instance is fetched</param>
            <param name="fetchInput">If set, fetch and return the input for the orchestration instance.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(System.String,System.String,System.Boolean)">
            <summary>
            Get The Orchestration State for a particular orchestration instance execution
            </summary>
            <param name="instanceId">Instance Id</param>
            <param name="executionId">Execution Id</param>
            <param name="fetchInput">If set, fetch and return the input for the orchestration instance.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.FetchInstanceStatusAsync(System.String)">
            <summary>
            Fetches the latest instance status of the specified orchestration instance.
            </summary>
            <param name="instanceId">The ID of the orchestration.</param>
            <returns>Returns the instance status or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(System.Threading.CancellationToken)">
            <summary>
            Get The Orchestration State for querying all orchestration instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fetches instances status for multiple orchestration instances.
            </summary>
            <param name="instanceIds">The list of instances to query for.</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus},System.Threading.CancellationToken)">
            <summary>
            Get The Orchestration State for querying orchestration instances by the condition
            </summary>
            <param name="createdTimeFrom">CreatedTimeFrom</param>
            <param name="createdTimeTo">CreatedTimeTo</param>
            <param name="runtimeStatus">RuntimeStatus</param>
            <param name="cancellationToken">cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus},System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get The Orchestration State for querying orchestration instances by the condition
            </summary>
            <param name="createdTimeFrom">CreatedTimeFrom</param>
            <param name="createdTimeTo">CreatedTimeTo</param>
            <param name="runtimeStatus">RuntimeStatus</param>
            <param name="top">Top</param>
            <param name="continuationToken">Continuation token</param>
            <param name="cancellationToken">cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.GetStateAsync(DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get The Orchestration State for querying orchestration instances by the condition
            </summary>
            <param name="condition">Condition</param>
            <param name="top">Top</param>
            <param name="continuationToken">ContinuationToken</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.SetNewExecutionAsync(DurableTask.Core.History.ExecutionStartedEvent,System.String,System.String)">
            <summary>
            Used to set a state in the tracking store whenever a new execution is initiated from the client
            </summary>
            <param name="executionStartedEvent">The Execution Started Event being queued</param>
            <param name="eTag">The eTag value to use for optimistic concurrency or <c>null</c> to overwrite any existing execution status.</param>
            <param name="inputPayloadOverride">An override value to use for the Input column. If not specified, uses <see cref="P:DurableTask.Core.History.ExecutionStartedEvent.Input"/>.</param>
            <returns>Returns <c>true</c> if the record was created successfully; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.UpdateStatusForRewindAsync(System.String)">
            <summary>
            Used to update a state in the tracking store to pending whenever a rewind is initiated from the client
            </summary>
            <param name="instanceId">The instance being rewound</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.PurgeHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <summary>
            Purge The History and state  which is older than thresholdDateTimeUtc based on the timestamp type specified by timeRangeFilterType
            </summary>
            <param name="thresholdDateTimeUtc">Timestamp threshold, data older than this will be removed</param>
            <param name="timeRangeFilterType">timeRangeFilterType governs the type of time stamp that will be used for decision making</param>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.PurgeInstanceHistoryAsync(System.String)">
            <summary>
            Purge the history for a concrete instance 
            </summary>
            <param name="instanceId">Instance ID</param>
            <returns>Class containing number of storage requests sent, along with instances and rows deleted/purged</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.ITrackingStore.PurgeInstanceHistoryAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})">
            <summary>
            Purge the orchestration history for instances that match the conditions
            </summary>
            <param name="createdTimeFrom">Start creation time for querying instances for purging</param>
            <param name="createdTimeTo">End creation time for querying instances for purging</param>
            <param name="runtimeStatus">List of runtime status for querying instances for purging. Only Completed, Terminated, or Failed will be processed</param>
            <returns>Class containing number of storage requests sent, along with instances and rows deleted/purged</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.KeySanitation.EscapePartitionKey(System.String)">
            <summary>
            Escape any characters that can't be used in Azure PartitionKey.
            https://docs.microsoft.com/en-us/rest/api/storageservices/Understanding-the-Table-Service-Data-Model?redirectedfrom=MSDN
            </summary>
            <param name="key"></param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.KeySanitation.UnescapePartitionKey(System.String)">
            <summary>
            Unescape characters that were previously escaped.
            </summary>
            <param name="key"></param>
            <returns>The original string.</returns>
        </member>
        <member name="T:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition">
            <summary>
            OrchestrationInstanceStatusQueryBuilder is a builder to create a StorageTable Query
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.RuntimeStatus">
            <summary>
            RuntimeStatus
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.CreatedTimeFrom">
            <summary>
            CreatedTimeFrom
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.CreatedTimeTo">
            <summary>
            CreatedTimeTo
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.TaskHubNames">
            <summary>
            Collection of TaskHub name
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.InstanceIdPrefix">
            <summary>
            InstanceIdPrefix
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.InstanceId">
            <summary>
            InstanceId
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.FetchInput">
            <summary>
            If true, the input will be returned with the results. The default value is true.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.FetchOutput">
            <summary>
            If true, the output will be returned with the results. The default value is true.
            </summary>
        </member>
        <member name="P:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.ExcludeEntities">
            <summary>
            Whether to exclude entities from the results.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.ToTableQuery``1">
            <summary>
            Get the TableQuery object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.OrchestrationInstanceStatusQueryCondition.Parse(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})">
            <summary>
            Parse is a factory method of the OrchestrationInstanceStatusConditionQuery
            </summary>
            <param name="createdTimeFrom">CreatedTimeFrom</param>
            <param name="createdTimeTo">CreatedTimeTo</param>
            <param name="runtimeStatus">RuntimeStatus</param>
            <returns></returns>
        </member>
        <member name="T:DurableTask.AzureStorage.Tracking.TableEntityConverter">
            <summary>
            Utility class for converting [DataContract] objects into DynamicTableEntity and back.
            This class makes heavy use of reflection to build the entity converters.
            </summary>
            <remarks>
            This class is safe for concurrent usage by multiple threads.
            </remarks>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TableEntityConverter.ConvertToTableEntity(System.Object)">
            <summary>
            Converts a data contract object into a <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity"/>.
            </summary>
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.CreateAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.DeleteAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.ExistsAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetHistoryEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.RewindHistoryAsync(System.String,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.FetchInstanceStatusAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetStateAsync(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetStateAsync(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetStateAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetStateAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetStateAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.GetStateAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus},System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.PurgeHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.PurgeInstanceHistoryAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.PurgeInstanceHistoryAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.SetNewExecutionAsync(DurableTask.Core.History.ExecutionStartedEvent,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.UpdateStatusForRewindAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Tracking.TrackingStoreBase.UpdateStateAsync(DurableTask.Core.OrchestrationRuntimeState,DurableTask.Core.OrchestrationRuntimeState,System.String,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.GetTargetClassName(System.String)">
            <summary>
            Get the ClassName part delimited by +
            e.g. DurableTask.AzureStorage.Tests.Correlation.CorrelationScenarioTest+SayHelloActivity
            should be "SayHelloActivity"
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.SerializeToJson(System.Object)">
            <summary>
            Serialize some object payload to a JSON-string representation.
            This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
            </summary>
            <param name="payload">The object to serialize.</param>
            <returns>The JSON-string representation of the payload</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.SerializeToJson(Newtonsoft.Json.JsonSerializer,System.Object)">
            <summary>
            Serialize some object payload to a JSON-string representation.
            This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
            </summary>
            <param name="serializer">The serializer to use.</param>
            <param name="payload">The object to serialize.</param>
            <returns>The JSON-string representation of the payload</returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.DeserializeFromJson``1(Newtonsoft.Json.JsonSerializer,System.String)">
            <summary>
            Deserialize a JSON-string into an object of type T
            This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
            </summary>
            <typeparam name="T">The type to deserialize the JSON string into.</typeparam>
            <param name="serializer">The serializer whose config will guide the deserialization.</param>
            <param name="jsonString">The JSON-string to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.DeserializeFromJson``1(System.String)">
            <summary>
            Deserialize a JSON-string into an object of type T
            This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
            </summary>
            <typeparam name="T">The type to deserialize the JSON string into.</typeparam>
            <param name="jsonString">The JSON-string to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.DeserializeFromJson(System.String,System.Type)">
            <summary>
            Deserialize a JSON-string into an object of type `type`
            This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
            </summary>
            <param name="jsonString">The JSON-string to deserialize.</param>
            <param name="type">The expected de-serialization type.</param>
            <returns></returns>
        </member>
        <member name="M:DurableTask.AzureStorage.Utils.DeserializeFromJson(Newtonsoft.Json.JsonSerializer,System.String,System.Type)">
            <summary>
            Deserialize a JSON-string into an object of type `type`
            This utility is resilient to end-user changes in the DefaultSettings of Newtonsoft.
            </summary>
            <param name="serializer">The serializer whose config will guide the deserialization.</param>
            <param name="jsonString">The JSON-string to deserialize.</param>
            <param name="type">The expected de-serialization type.</param>
            <returns></returns>
        </member>
    </members>
</doc>
